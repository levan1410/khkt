# ============ IMPORTS ============
import streamlit as st
import numpy as np
import cv2
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import json
import pandas as pd
from datetime import datetime, date
import os, io, re, requests
from streamlit_mic_recorder import mic_recorder
import google.generativeai as genai
import urllib.parse as _u

# ============ PAGE CONFIG ============
st.set_page_config(page_title="AI S∆° c·ª©u & D·ªã ·ª©ng", layout="wide")

# ============ H√ÄM NH√öNG YOUTUBE ============
def render_youtube(url, height=460):
    """Nh√∫ng video YouTube b·∫±ng iframe, ki·ªÉm so√°t k√≠ch th∆∞·ªõc."""
    if "youtube.com" in url or "youtu.be" in url:
        if "youtu.be" in url:
            vid_id = url.split("/")[-1]
        else:
            vid_id = url.split("v=")[-1].split("&")[0]
        st.markdown(f'''
        <iframe width="100%" height="{height}"
                src="https://www.youtube.com/embed/{vid_id}?rel=0"
                frameborder="0" allowfullscreen></iframe>
        ''', unsafe_allow_html=True)
    else:
        st.video(url)

# ============ LOAD FILE TH√îNG TIN ============
with open("wound_info.json", "r", encoding="utf-8") as f:
    wound_info = json.load(f)

# ============ LOAD MODEL (cache) ============
MODEL_PATH = "model_class.keras"

@st.cache_resource
def load_cls_model(path=MODEL_PATH):
    return load_model(path)

model = load_cls_model(MODEL_PATH)

# ============ DANH S√ÅCH CLASS ============
class_names = [
    'Abrasions', 'Bruises', 'Burns', 'Cut',
    'Diabetic Wounds', 'Laceration', 'Normal',
    'Pressure Wounds', 'Surgical Wounds', 'Venous Wounds'
]

# ============ H√ÄM D·ª∞ ƒêO√ÅN ============
def predict_image(image: Image.Image):
    img_rgb = np.array(image.convert("RGB"))
    img_resized = cv2.resize(img_rgb, (160, 160))
    input_img = np.expand_dims(img_resized, axis=0)

    preds = model.predict(input_img)
    scores = tf.nn.softmax(preds[0]).numpy()  # n·∫øu model ƒë√£ softmax s·∫µn th√¨ v·∫´n ok
    pred_label = int(np.argmax(scores))
    confidence = float(scores[pred_label])
    return class_names[pred_label], confidence, scores

# ================== FIRST AID VIDEOS ==================
first_aid_videos = {
    "Abrasions": [
        "https://www.youtube.com/watch?v=K9Loqqoe3pE",
        "https://www.youtube.com/watch?v=IKcddYDbm6s",
        "https://www.youtube.com/watch?v=zIo41ndcKng"
    ],
    "Cut": [
        "https://www.youtube.com/watch?v=T-8Ac6RYZgI",
        "https://www.youtube.com/watch?v=1c6csZihf8M"
    ],
    "Burns": [
        "https://www.youtube.com/watch?v=EWH6LA5Cg2Y",
        "https://www.youtube.com/watch?v=J0ZtLnhpJxM"
    ],
    "Normal": [
        "https://www.youtube.com/watch?v=98yNdXf_Yw4"
    ],
    "Laceration": [
        "https://www.youtube.com/watch?v=R4DutP4ya9w",
        "https://www.youtube.com/watch?v=tRpHkcjgkdw"
    ],
    "Diabetic Wounds": [
        "https://www.youtube.com/watch?v=iPgnjJICzos",
        "https://www.youtube.com/watch?v=IHlV2M-8a2Q",
        "https://www.youtube.com/watch?v=N8M4qj6w82c"
    ],
    "Pressure Wounds": [
        "https://www.youtube.com/watch?v=BiqLzQ6nHWM",
        "https://www.youtube.com/watch?v=ynP1Ocooh3E"
    ],
    "Surgical Wounds": [
        "https://www.youtube.com/watch?v=R4DutP4ya9w",
        "https://www.youtube.com/watch?v=tRpHkcjgkdw"
    ],
    "Bruises": [
        "https://www.youtube.com/watch?v=4E_tScuwOYo",
        "https://www.youtube.com/watch?v=0uZpPpxM1aE"
    ],
    "Venous Wounds": [
        "https://www.youtube.com/watch?v=4ZUXy1kJqDg",
        "https://www.youtube.com/watch?v=nL-H3RSlFOQ"
    ],
}
def get_first_aid_videos(label: str):
    return first_aid_videos.get(label, [])

# ================== OTC / Rx MODULE (t·ªëi gi·∫£n) ==================
OTC_ACTIVES = {
    "paracetamol": {"alias": ["acetaminophen"], "note": "OTC li·ªÅu th∆∞·ªùng 325‚Äì500mg; c·∫£nh b√°o qu√° li·ªÅu"},
    "ibuprofen": {"note": "OTC li·ªÅu th·∫•p ng∆∞·ªùi l·ªõn; c√¢n nh·∫Øc d·∫° d√†y/ thai k·ª≥"},
    "loratadine": {"note": "kh√°ng histamine th·∫ø h·ªá 2 (√≠t bu·ªìn ng·ªß)"},
    "cetirizine": {"note": "kh√°ng histamine; c√≥ th·ªÉ g√¢y bu·ªìn ng·ªß nh·∫π"},
    "fexofenadine": {},
    "chlorpheniramine": {"note": "kh√°ng H1 ƒë·ªùi c≈©; g√¢y bu·ªìn ng·ªß r√µ"},
    "dextromethorphan": {"note": "·ª©c ch·∫ø ho; tr√°nh l·∫°m d·ª•ng"},
    "guaifenesin": {"note": "long ƒë·ªùm"},
    "ors": {"alias": ["oresol", "oral rehydration salts"], "note": "b√π n∆∞·ªõc ƒëi·ªán gi·∫£i"},
    "simethicone": {"note": "ƒë·∫ßy h∆°i, ch∆∞·ªõng b·ª•ng"},
    "aluminum hydroxide": {"alias": ["aluminium hydroxide"]},
    "magnesium hydroxide": {},
    "activated charcoal": {"alias": ["than hoat", "than ho·∫°t"]},
    "sodium cromoglicate": {"alias": ["sodium cromoglycate"], "note": "vi√™m k·∫øt m·∫°c/vi√™m m≈©i d·ªã ·ª©ng nh·∫π"},
    "oxymetazoline": {"note": "x·ªãt m≈©i: ch·ªâ d√πng ng·∫Øn ng√†y (‚â§3 ng√†y)"},
}
ALIASES = {}
for k, v in list(OTC_ACTIVES.items()):
    for a in v.get("alias", []):
        ALIASES[a.lower()] = k

def _norm(s: str):
    s = s.lower().strip()
    s = re.sub(r"[^a-z0-9 +./-]", " ", s)
    s = re.sub(r"\s+", " ", s)
    return s

def _tokenize_acts(s: str):
    s = _norm(s)
    parts = re.split(r"[+,/;]| with | and ", s)
    acts = []
    for p in parts:
        p = p.strip()
        if not p:
            continue
        if p in ALIASES:
            p = ALIASES[p]
        acts.append(p)
    return [a for a in acts if a]

def classify_rx_otc(input_text: str):
    acts = _tokenize_acts(input_text)
    if not acts:
        return {"status": "unknown", "hits": [], "reason": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ho·∫°t ch·∫•t."}
    hits, all_otc = [], True
    for a in acts:
        matched = None
        for k in OTC_ACTIVES.keys():
            if k in a:
                matched = k
                break
        if matched:
            hits.append((a, "OTC", OTC_ACTIVES[matched].get("note", "")))
        else:
            all_otc = False
            hits.append((a, "Rx", "Kh√¥ng n·∫±m trong danh s√°ch OTC r√∫t g·ªçn (local)"))
    status = "OTC" if all_otc else "Rx/Kh√¥ng ch·∫Øc"
    return {"status": status, "hits": hits, "reason": "D·ª±a tr√™n danh s√°ch OTC local (c·∫ßn x√°c minh khi kh√¥ng ch·∫Øc)."}

# ================== SESSION STATE ==================
if "wound_records" not in st.session_state:
    st.session_state.wound_records = []
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# ================== TABS ==================
tabs = st.tabs([
    "ü©∫ ·∫¢nh v·∫øt th∆∞∆°ng",
    "üíä Thu·ªëc OTC / K√™ ƒë∆°n",
    "ü§ñ B√°c sƒ© AI",
    "üìä Th·ªëng k√™",
])
tab1, tab2, tab3, tab4 = tabs

# ================== TAB 1: ·∫¢NH V·∫æT TH∆Ø∆†NG ==================
with tab1:
    st.title("ü©∫ Ch∆∞∆°ng tr√¨nh ph√¢n lo·∫°i v·∫øt th∆∞∆°ng")
    st.write("Upload ·∫£nh ch·ª•p ƒë·ªÉ ch∆∞∆°ng tr√¨nh d·ª± ƒëo√°n lo·∫°i v·∫øt th∆∞∆°ng & g·ª£i √Ω ph∆∞∆°ng √°n s∆° c·ª©u.")
    st.divider()

    uploaded_file = st.file_uploader("Ch·ªçn m·ªôt ·∫£nh...", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="·∫¢nh ƒë√£ upload", use_container_width=True)

        # D·ª± ƒëo√°n
        label, confidence, scores = predict_image(image)
        info = wound_info[label]

        left, right = st.columns([1, 1])

        with left:
            st.markdown(f"### ‚úÖ K·∫øt qu·∫£: **{info['ten_viet']} ({label})**")
            st.markdown(f"**ƒê·ªô tin c·∫≠y:** {confidence*100:.2f}%")

            # ====== TH√îNG TIN NGUY C∆† & KHI N√ÄO ƒêI KH√ÅM ======
            muc_do = info.get("muc_do", "Ch∆∞a x√°c ƒë·ªãnh")
            st.markdown(f"### ü©π **M·ª©c ƒë·ªô nguy c∆°:** {muc_do}")
            if any(k in muc_do.lower() for k in ["v·ª´a/n·∫∑ng", "n·∫∑ng"]):
                st.error("üö® Khuy·∫øn ngh·ªã: ƒê·∫øn c∆° s·ªü y t·∫ø ƒë·ªÉ ƒë∆∞·ª£c x·ª≠ tr√≠ chuy√™n s√¢u.")
            else:
                st.success("‚úÖ C√≥ th·ªÉ s∆° c·ª©u t·∫°i nh√† v√† theo d√µi th√™m 1‚Äì2 ng√†y.")

            with st.expander("‚ö†Ô∏è Khi n√†o c·∫ßn ƒëi kh√°m ngay?", expanded=False):
                st.write(info.get("canh_bao", "Theo d√µi tri·ªáu ch·ª©ng b·∫•t th∆∞·ªùng v√† ƒëi kh√°m khi c·∫ßn."))

            with st.expander("üìã M√¥ t·∫£ chi ti·∫øt", expanded=True):
                st.write(info["mo_ta"])

            with st.expander("üöë S∆° c·ª©u / ƒêi·ªÅu tr·ªã ban ƒë·∫ßu", expanded=True):
                st.write(info["so_cuu"])

        with right:
            st.subheader("üé¨ Video s∆° c·ª©u")
            vids = get_first_aid_videos(label)
            if not vids:
                st.info("Ch∆∞a c√≥ video cho lo·∫°i v·∫øt th∆∞∆°ng n√†y.")
            else:
                idx = 0 if len(vids) == 1 else st.selectbox(
                    "Ch·ªçn video:", range(len(vids)), format_func=lambda x: f"Video {x+1}"
                )
                render_youtube(vids[idx], height=460)

        st.divider()

        # --- üìù NH·∫¨T K√ù ---
        st.subheader("üìù Nh·∫≠t k√Ω b·ªánh √°n")
        with st.form("wound_log_form", clear_on_submit=True):
            c1, c2 = st.columns(2)
            with c1:
                pid = st.text_input("M√£ BN / H·ªç t√™n", placeholder="VD: BN_2025_001 ho·∫∑c Nguy·ªÖn VƒÉn A")
                age = st.text_input("Tu·ªïi", placeholder="VD: 32")
                phone = st.text_input("SƒêT (tu·ª≥ ch·ªçn)", placeholder="VD: 09xx...")
            with c2:
                severity = st.selectbox("M·ª©c ƒë·ªô", ["Nh·∫π", "V·ª´a", "N·∫∑ng"], index=1)
                final_label = st.text_input("Ch·∫©n ƒëo√°n (c√≥ th·ªÉ ch·ªânh)", value=f"{info['ten_viet']} ({label})")
                followup = st.date_input("Ng√†y t√°i kh√°m (tu·ª≥ ch·ªçn)", value=date.today())

            symptoms = st.text_area("Tri·ªáu ch·ª©ng/di·ªÖn ti·∫øn", placeholder="M√¥ t·∫£ chi ti·∫øt...")
            treatment = st.text_area("X·ª≠ tr√≠/ƒëi·ªÅu tr·ªã ƒë√£ th·ª±c hi·ªán", value=info["so_cuu"])
            notes = st.text_input("Ghi ch√∫ kh√°c", placeholder="D·ªã ·ª©ng thu·ªëc, b·ªánh n·ªÅn...")

            submitted = st.form_submit_button("üíæ L∆∞u nh·∫≠t k√Ω ca n√†y")
            if submitted:
                record = {
                    "Th·ªùi gian": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "M√£/BN": pid,
                    "Tu·ªïi": age,
                    "SƒêT": phone,
                    "M·ª©c ƒë·ªô": severity,
                    "Ch·∫©n ƒëo√°n (cu·ªëi)": final_label,
                    "Ch·∫©n ƒëo√°n (AI)": f"{info['ten_viet']} ({label})",
                    "ƒê·ªô tin c·∫≠y (%)": round(confidence*100, 2),
                    "Tri·ªáu ch·ª©ng": symptoms,
                    "X·ª≠ tr√≠ ban ƒë·∫ßu": treatment,
                    "Ghi ch√∫": notes,
                    "Ng√†y t√°i kh√°m": followup.strftime("%Y-%m-%d") if followup else "",
                    "T√™n file ·∫£nh": getattr(uploaded_file, "name", ""),
                }
                st.session_state.wound_records.append(record)
                st.success("ƒê√£ l∆∞u v√†o nh·∫≠t k√Ω! (·ªü b√™n d∆∞·ªõi)")

        if st.session_state.wound_records:
            st.markdown("#### üìö L·ªãch s·ª≠ nh·∫≠t k√Ω")
            df = pd.DataFrame(st.session_state.wound_records)
            st.dataframe(df, use_container_width=True, height=340)

            csv_bytes = df.to_csv(index=False).encode("utf-8-sig")
            st.download_button("‚¨áÔ∏è T·∫£i to√†n b·ªô nh·∫≠t k√Ω (CSV)", data=csv_bytes,
                               file_name="wound_log.csv", mime="text/csv")
    else:
        st.info("H√£y ch·ªçn m·ªôt ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu ch·∫©n ƒëo√°n v√† ghi nh·∫≠t k√Ω.")

# ================== TAB 2: G·ª¢I √ù THU·ªêC + MUA ONLINE (Long Ch√¢u) + Ph√¢n lo·∫°i ==================
with tab2:
    st.header("üíä G·ª£i √Ω mua & Ph√¢n lo·∫°i thu·ªëc / thi·∫øt b·ªã")
    SUGGEST_BY_NEED = {
        "D·ªã ·ª©ng m≈©i/da nh·∫π": [
            {"item":"Loratadine 10 mg", "why":"d·ªã ·ª©ng theo m√πa/vi√™m m≈©i d·ªã ·ª©ng", "how":"1 vi√™n/ng√†y", "note":"√≠t g√¢y bu·ªìn ng·ªß", "lc_link":"https://nhathuoclongchau.com.vn/tim-kiem?q=loratadine%2010mg"},
            {"item":"Cetirizine 10 mg", "why":"d·ªã ·ª©ng/ ng·ª©a da", "how":"1 vi√™n/ng√†y", "note":"t·ªëi c√≥ th·ªÉ bu·ªìn ng·ªß", "lc_link":"https://nhathuoclongchau.com.vn/tim-kiem?q=cetirizine%2010mg"},
            {"item":"Sodium cromoglicate 2% (nh·ªè m·∫Øt)", "why":"ng·ª©a/ƒë·ªè m·∫Øt d·ªã ·ª©ng", "how":"1‚Äì2 gi·ªçt", "note":"kh√¥ng thay kh√°ng sinh", "lc_link":"https://nhathuoclongchau.com.vn/tim-kiem?q=sodium%20cromoglicate%202%25"},
            {"item":"N∆∞·ªõc mu·ªëi NaCl 0.9%", "why":"r·ª≠a m≈©i/m·∫Øt", "how":"x·ªãt/nh·ªè theo nhu c·∫ßu", "note":"", "lc_link":"https://nhathuoclongchau.com.vn/tim-kiem?q=nacl%200.9%25"}
        ],
        "ƒêau/ s·ªët nh·∫π": [
            {"item":"Paracetamol 500 mg", "why":"gi·∫£m ƒëau‚Äìh·∫° s·ªët", "how":"1 vi√™n m·ªói 6‚Äì8 gi·ªù", "note":"tr√°nh r∆∞·ª£u/thu·ªëc kh√°c", "lc_link":"https://nhathuoclongchau.com.vn/tim-kiem?q=paracetamol%20500mg"},
            {"item":"Ibuprofen 200 mg", "why":"ƒëau vi√™m nh·∫π", "how":"200‚Äì400 mg m·ªói 6‚Äì8 gi·ªù", "note":"d·∫° d√†y/ thai k·ª≥", "lc_link":"https://nhathuoclongchau.com.vn/tim-kiem?q=ibuprofen%20200mg"}
        ],
    }

    need = st.selectbox("Ch·ªçn nhu c·∫ßu:", list(SUGGEST_BY_NEED.keys()))
    if need:
        items = SUGGEST_BY_NEED[need]
        for it in items:
            st.write(f"‚Ä¢ **{it['item']}** ‚Äî {it['why']}"
                     + (f" | C√°ch d√πng: _{it.get('how','')}_ " if it.get('how') else "")
                     + (f" | ‚ö†Ô∏è {it.get('note','')}" if it.get('note') else ""))
            if it.get("lc_link"):
                st.markdown(f"[üõí Mua t·∫°i Long Ch√¢u]({it['lc_link']})")

    st.caption("L∆∞u √Ω: Th√¥ng tin tham kh·∫£o ‚Äî h√£y h·ªèi d∆∞·ª£c sƒ© ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ph√π h·ª£p.")
    st.divider()

    # --- Ph√¢n lo·∫°i OTC/Rx g·ªçn ---
    st.subheader("üîé Ph√¢n lo·∫°i ho·∫°t ch·∫•t: OTC hay Rx")
    drug_q = st.text_input("Nh·∫≠p t√™n **ho·∫°t ch·∫•t** ho·∫∑c **k·∫øt h·ª£p** (vd: paracetamol 500mg + loratadine)")
    col_rx1, col_rx2 = st.columns([1,1])

    with col_rx1:
        if st.button("Ph√¢n lo·∫°i"):
            if not drug_q.strip():
                st.warning("Vui l√≤ng nh·∫≠p t√™n thu·ªëc/ho·∫°t ch·∫•t.")
            else:
                res = classify_rx_otc(drug_q)
                st.subheader(f"K·∫øt qu·∫£: {res['status']}")
                if res["hits"]:
                    for a, lab, note in res["hits"]:
                        st.write(f"- **{a}** ‚Üí **{lab}**")
                if res["status"] == "OTC":
                    lc_q = _u.quote_plus(drug_q)
                    st.markdown(f"[üõí Mua online t·∫°i Long Ch√¢u](https://nhathuoclongchau.com.vn/tim-kiem?q={lc_q})")
                else:
                    st.info("‚õëÔ∏è Thu·ªëc k√™ ƒë∆°n/kh√¥ng ch·∫Øc: h·ªèi d∆∞·ª£c sƒ© ho·∫∑c b√°c sƒ© tr∆∞·ªõc khi mua/d√πng.")

    with col_rx2:
        st.info("Kh√¥ng ch·∫Øc li·ªÅu/ƒë·ªëi t∆∞·ª£ng d√πng? H√£y h·ªèi **d∆∞·ª£c sƒ©** t·∫°i nh√† thu·ªëc g·∫ßn nh·∫•t.")
        st.markdown("[üåê Tra c·ª©u ch√≠nh th·ª©c (DAV)](https://dav.gov.vn/tra-cuu-thuoc.html)")

# ================== TAB 3: B√ÅC Sƒ® AI (CHAT) ==================
with tab3:
    st.header("ü§ñ T∆∞ v·∫•n AI - B√°c sƒ© ·∫£o")
    # Hi·ªÉn th·ªã l·ªãch s·ª≠
    for chat in st.session_state.chat_history:
        role = "üßë‚Äç‚öïÔ∏è B√°c sƒ© AI" if chat["role"] == "assistant" else "üßç‚Äç‚ôÇÔ∏è B·∫°n"
        with st.chat_message(chat["role"]):
            st.markdown(f"**{role}:** {chat['content']}")

    # Nh·∫≠p c√¢u h·ªèi
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (vd: V·∫øt th∆∞∆°ng n√†y c√≥ c·∫ßn bƒÉng l·∫°i kh√¥ng?)")
    if user_input:
        st.chat_message("user").markdown(f"**B·∫°n:** {user_input}")
        st.session_state.chat_history.append({"role": "user", "content": user_input})

        try:
            response = requests.post(
                "https://belle-buyer-refuse-performing.trycloudflare.com",
                json={"model": "gemma:2b", "prompt": user_input, "stream": False},
                timeout=60
            )
            response.raise_for_status()
            data = response.json()
            ai_text = data.get("response", "").strip()

            st.chat_message("assistant").markdown(f"**üßë‚Äç‚öïÔ∏è B√°c sƒ© AI:** {ai_text}")
            st.session_state.chat_history.append({"role": "assistant", "content": ai_text})

        except requests.exceptions.RequestException as e:
            st.error(f"üö´ L·ªói khi k·∫øt n·ªëi Ollama: {e}")
            st.info("‚öôÔ∏è Ki·ªÉm tra: ƒë√£ ch·∫°y `ollama serve` v√† `ollama pull gemma:2b` ch∆∞a?")

# ================== TAB 4: üìä TH·ªêNG K√ä & B√ÅO C√ÅO ==================
with tab4:
    st.header("üìä Th·ªëng k√™ & B√°o c√°o")

    if not st.session_state.wound_records:
        st.info("Ch∆∞a c√≥ ca n√†o trong nh·∫≠t k√Ω. H√£y ch·∫°y ph√¢n lo·∫°i ·ªü Tab 1 ƒë·ªÉ c√≥ d·ªØ li·ªáu th·ªëng k√™.")
    else:
        df = pd.DataFrame(st.session_state.wound_records).copy()

        # Chu·∫©n ho√° th·ªùi gian & ng√†y
        try:
            df["Th·ªùi gian"] = pd.to_datetime(df["Th·ªùi gian"])
        except Exception:
            pass
        if "Th·ªùi gian" in df.columns:
            df["Ng√†y"] = df["Th·ªùi gian"].dt.date
        else:
            df["Ng√†y"] = date.today()

        # --- B·ªô l·ªçc ---
        colf1, colf2, colf3 = st.columns([1,1,1])
        with colf1:
            min_day = min(df["Ng√†y"])
            max_day = max(df["Ng√†y"])
            d_from, d_to = st.date_input("Kho·∫£ng ng√†y", value=(min_day, max_day))
        with colf2:
            labels = sorted(df["Ch·∫©n ƒëo√°n (AI)"].unique().tolist()) if "Ch·∫©n ƒëo√°n (AI)" in df.columns else []
            pick_labels = st.multiselect("L·ªçc theo nh√£n", options=labels, default=labels)
        with colf3:
            severities = sorted(df["M·ª©c ƒë·ªô"].unique().tolist()) if "M·ª©c ƒë·ªô" in df.columns else []
            pick_sev = st.multiselect("L·ªçc theo m·ª©c ƒë·ªô", options=severities, default=severities)

        # √Åp b·ªô l·ªçc
        mask = (df["Ng√†y"] >= d_from) & (df["Ng√†y"] <= d_to)
        if pick_labels:
            mask &= df["Ch·∫©n ƒëo√°n (AI)"].isin(pick_labels)
        if pick_sev:
            mask &= df["M·ª©c ƒë·ªô"].isin(pick_sev)
        dff = df[mask].copy()

        st.markdown(f"**S·ªë ca sau l·ªçc:** {len(dff)}")

        # --- Bi·ªÉu ƒë·ªì ---
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üóìÔ∏è S·ªë ca theo ng√†y")
            daily = dff.groupby("Ng√†y").size().rename("S·ªë ca")
            if len(daily) == 0:
                st.info("Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng l·ªçc.")
            else:
                st.line_chart(daily)

        with col2:
            st.subheader("üè∑Ô∏è Ph√¢n b·ªë theo nh√£n")
            if "Ch·∫©n ƒëo√°n (AI)" in dff.columns:
                by_label = dff["Ch·∫©n ƒëo√°n (AI)"].value_counts()
                if len(by_label) == 0:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu.")
                else:
                    st.bar_chart(by_label)

        col3, col4 = st.columns(2)
        with col3:
            st.subheader("ü©π Ph√¢n b·ªë theo m·ª©c ƒë·ªô")
            if "M·ª©c ƒë·ªô" in dff.columns:
                by_sev = dff["M·ª©c ƒë·ªô"].value_counts()
                if len(by_sev) == 0:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu.")
                else:
                    st.bar_chart(by_sev)

        with col4:
            st.subheader("üéØ ƒê·ªô tin c·∫≠y (trung b√¨nh)")
            if "ƒê·ªô tin c·∫≠y (%)" in dff.columns and not dff["ƒê·ªô tin c·∫≠y (%)"].empty:
                avg_acc = round(float(dff["ƒê·ªô tin c·∫≠y (%)"].mean()), 2)
                st.metric("ƒê·ªô tin c·∫≠y trung b√¨nh (%)", avg_acc)
            else:
                st.info("Ch∆∞a c√≥ tr∆∞·ªùng 'ƒê·ªô tin c·∫≠y (%)'.")

        st.divider()
        st.subheader("üìù Ca g·∫ßn nh·∫•t (10 d√≤ng)")
        st.dataframe(
            dff.sort_values("Th·ªùi gian", ascending=False).head(10),
            use_container_width=True, height=260
        )

        # --- T·∫£i v·ªÅ CSV ---
        csv_all = dff.to_csv(index=False).encode("utf-8-sig")
        st.download_button("‚¨áÔ∏è T·∫£i d·ªØ li·ªáu ƒë√£ l·ªçc (CSV)", data=csv_all,
         file_name="thong_ke_wound_records.csv", mime="text/csv")
